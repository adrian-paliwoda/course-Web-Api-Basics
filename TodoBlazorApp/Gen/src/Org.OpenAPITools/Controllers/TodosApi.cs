/*
 * Todo API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TodosApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="todoId"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/api/Todos/{todoId}/complete")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("CompleteTask")]
        public virtual IActionResult CompleteTask([FromRoute (Name = "todoId")][Required]int todoId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/api/Todos")]
        [Authorize]
        [Consumes("application/json", "text/json", "application/*+json")]
        [ValidateModelState]
        [SwaggerOperation("CreateTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(Todo), description: "OK")]
        public virtual IActionResult CreateTask([FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Todo));
            string exampleJson = null;
            exampleJson = "{\n  \"task\" : \"task\",\n  \"id\" : 0,\n  \"assignedTo\" : 6,\n  \"isComplete\" : true\n}";
            exampleJson = "Custom MIME type example not yet supported: text/json";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Todo>(exampleJson)
            : default(Todo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="todoId"></param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/api/Todos/{todoId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("Delete")]
        public virtual IActionResult Delete([FromRoute (Name = "todoId")][Required]int todoId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/api/Todos")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetAllTasks")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Todo>), description: "OK")]
        public virtual IActionResult GetAllTasks()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Todo>));
            string exampleJson = null;
            exampleJson = "{\n  \"task\" : \"task\",\n  \"id\" : 0,\n  \"assignedTo\" : 6,\n  \"isComplete\" : true\n}";
            exampleJson = "Custom MIME type example not yet supported: text/json";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Todo>>(exampleJson)
            : default(List<Todo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="todoId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/api/Todos/{todoId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(Todo), description: "OK")]
        public virtual IActionResult GetTask([FromRoute (Name = "todoId")][Required]int todoId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Todo));
            string exampleJson = null;
            exampleJson = "{\n  \"task\" : \"task\",\n  \"id\" : 0,\n  \"assignedTo\" : 6,\n  \"isComplete\" : true\n}";
            exampleJson = "Custom MIME type example not yet supported: text/json";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Todo>(exampleJson)
            : default(Todo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="todoId"></param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/api/Todos/{todoId}")]
        [Authorize]
        [Consumes("application/json", "text/json", "application/*+json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateTask")]
        public virtual IActionResult UpdateTask([FromRoute (Name = "todoId")][Required]int todoId, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
